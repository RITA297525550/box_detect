{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"rea",
				"realsense"
			],
			[
				"alig",
				"align_to_depth"
			],
			[
				"dep",
				"depth_img"
			],
			[
				"pthread_un",
				"pthread_mutex_unlock\tint pthread_mutex_unlock(pthread_mutex_t *__mutex)"
			],
			[
				"im",
				"imgMutex\tpthread_mutex_t imgMutex"
			],
			[
				"pthread_mu",
				"pthread_mutex_lock\tint pthread_mutex_lock(pthread_mutex_t *__mutex)"
			],
			[
				"get",
				"get_data\tconst void * get_data() const"
			],
			[
				"get_",
				"get_depth_frame\trs2::depth_frame get_depth_frame() const"
			],
			[
				"ge",
				"get_color_frame\trs2::video_frame get_color_frame() const"
			],
			[
				"read",
				"read_func"
			],
			[
				"realse",
				"realsense.h\t/home/ssc/C++work/box_detect/includes"
			],
			[
				"mean",
				"meanStdDev\tvoid meanStdDev(InputArray src, OutputArray mean, OutputArray stddev)"
			],
			[
				"CV_8UC",
				"CV_8UC3\tCV_8UC3"
			],
			[
				"val",
				"varlocal"
			],
			[
				"Vec3",
				"Vec3f\tVec3f"
			],
			[
				"s",
				"size\tcv::Mat::MSize size"
			],
			[
				"re",
				"rect"
			],
			[
				"pol",
				"polygon"
			],
			[
				"Bl",
				"BLACK_img\tcv::Mat BLACK_img"
			],
			[
				"dete",
				"detect.h\t/home/ssc/C++work/box_detect/includes"
			],
			[
				"_D",
				"_DETECT_H"
			],
			[
				"img",
				"imgROI"
			],
			[
				"norm",
				"normal_distribution\tnormal_distribution<>"
			],
			[
				"row",
				"rows\tint rows"
			],
			[
				"col",
				"cols\tint cols"
			],
			[
				"Gb",
				"GB3\tstd::future<void> GB3"
			],
			[
				"fu",
				"future\tfuture<typename _Res>"
			],
			[
				"pri",
				"private"
			],
			[
				"_",
				"_rotation"
			],
			[
				"SC",
				"Scalar\tScalar"
			],
			[
				"Poin",
				"Point2f\tPoint2f"
			],
			[
				"end",
				"end_axis"
			],
			[
				"min",
				"min_index\tint min_index"
			],
			[
				"di",
				"distance"
			],
			[
				"rec",
				"rectangle\tvoid rectangle(cv::Mat &img, Rect rec, const Scalar &color)"
			],
			[
				"p",
				"point"
			],
			[
				"pl",
				"polygon"
			],
			[
				"ba",
				"bak_img\tcv::Mat bak_img"
			],
			[
				"max",
				"maxCorners"
			],
			[
				"po",
				"point1\tcv::Point point1"
			],
			[
				"B",
				"BLUE"
			],
			[
				"R",
				"RED"
			],
			[
				"dis",
				"disB"
			],
			[
				"dra",
				"drawContours\tvoid drawContours(InputOutputArray image, InputArrayOfArrays contours, int contourIdx, const Scalar &color)"
			],
			[
				"con",
				"contourArea\tdouble contourArea(InputArray contour)"
			],
			[
				"cou",
				"contours"
			],
			[
				"thre",
				"threshold\tdouble threshold(InputArray src, OutputArray dst, double thresh, double maxval, int type)"
			],
			[
				"Quaternion",
				"Quaterniond\tQuaterniond"
			],
			[
				"Uni",
				"UnitX\tconst BasisReturnType UnitX()"
			],
			[
				"An",
				"AngleAxisd\tAngleAxisd"
			],
			[
				"Matr",
				"Matrix3d\tMatrix3d"
			],
			[
				"Ve",
				"Vector3d\tVector3d"
			],
			[
				"V",
				"Vector3d\tVector3d"
			],
			[
				"clock_",
				"clock_t\tclock_t"
			],
			[
				"recv",
				"recv_buff\tchar [80] recv_buff"
			],
			[
				"input",
				"input_size"
			],
			[
				"conn",
				"conn_writecb"
			],
			[
				"inpu",
				"input_size"
			],
			[
				"event_free",
				"event_base_free\tvoid event_base_free(struct event_base *)"
			],
			[
				"inp",
				"input_size\tsize_t input_size"
			],
			[
				"enc",
				"encode\tbool encode()"
			],
			[
				"it",
				"iter"
			],
			[
				"en",
				"encode\tbool encode()"
			],
			[
				"cJSON_AddNu",
				"cJSON_AddNumberToObject\tcJSON * cJSON_AddNumberToObject(cJSON *const object, const char *const name, const double number)"
			],
			[
				"my",
				"mycJSON\tmycJSON::"
			],
			[
				"cJSON_AddItem",
				"cJSON_AddItemToObject\tvoid cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)"
			],
			[
				"cJSON_Cre",
				"cJSON_CreateArray"
			],
			[
				"cJSON_C",
				"cJSON_CreateArray"
			],
			[
				"cJ",
				"cJSON_Object"
			],
			[
				"cJSON_A",
				"cJSON_AddNumberToObject\tcJSON * cJSON_AddNumberToObject(cJSON *const object, const char *const name, const double number)"
			],
			[
				"cJSON_Add",
				"cJSON_AddItemToArray\tvoid cJSON_AddItemToArray(cJSON *array, cJSON *item)"
			],
			[
				"ite",
				"item_size"
			],
			[
				"dec",
				"decode"
			],
			[
				"os",
				"ostream\tostream"
			],
			[
				"ope",
				"operator[]\tmycJSON & operator[](std::string name)"
			],
			[
				"inclu",
				"include_directories"
			],
			[
				"cJSON_P",
				"cJSON_Parse\tcJSON * cJSON_Parse(const char *value)"
			],
			[
				"cJSON_AddIte",
				"cJSON_AddItemToObject\tvoid cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)"
			],
			[
				"inc",
				"include_directories"
			],
			[
				"event_base_loo",
				"event_base_loopexit\tint event_base_loopexit(struct event_base *, const struct timeval *)"
			],
			[
				"even",
				"event_base_dispatch\tint event_base_dispatch(struct event_base *)"
			],
			[
				"LEV",
				"LEV_OPT_REUSEABLE\tLEV_OPT_REUSEABLE"
			],
			[
				"si",
				"sin_port\tin_port_t sin_port"
			],
			[
				"sin",
				"sin_family\tsa_family_t sin_family"
			],
			[
				"buffer",
				"bufferevent\tbufferevent"
			],
			[
				"size",
				"size_t\tsize_t"
			],
			[
				"evbu",
				"evbuffer_lock\tvoid evbuffer_lock(struct evbuffer *buf)"
			],
			[
				"event_base_lo",
				"event_base_loopbreak\tint event_base_loopbreak(struct event_base *)"
			],
			[
				"event_base",
				"event_base_loop\tint event_base_loop(struct event_base *, int)"
			],
			[
				"buff",
				"bufferevent"
			],
			[
				"stru",
				"struct\tstruct"
			],
			[
				"struct",
				"struct\tstruct"
			],
			[
				"evutil_s",
				"evutil_socket_t\tevutil_socket_t"
			],
			[
				"struc",
				"struct\tstruct"
			],
			[
				"event",
				"event2/event.h\t/usr/local/include"
			],
			[
				"lis",
				"listener_cb"
			],
			[
				"event_ba",
				"event_base_new\tstruct event_base * event_base_new()"
			],
			[
				"str",
				"struct\tstruct"
			],
			[
				"soc",
				"asm/socket.h\t/usr/include/x86_64-linux-gnu"
			],
			[
				"ros",
				"rospubstring\tros Publisher string"
			],
			[
				"ma",
				"main\tmain()"
			],
			[
				"da",
				"dataPoint"
			],
			[
				"data",
				"dataPoint\tstd::vector<std::pair<float, float> > dataPoint"
			],
			[
				"Gr",
				"Green\tconst cvplot::Color Green"
			],
			[
				"add",
				"addValue\tcvplot::Series & addValue(const std::vector<float> &values)"
			],
			[
				"gen",
				"gene1"
			],
			[
				"a",
				"assign\tvoid assign(size_type __n, const value_type &__val)"
			],
			[
				"P",
				"Popula"
			],
			[
				"Po",
				"Popula"
			],
			[
				"CV8",
				"CV_8UC1\tCV_8UC1"
			],
			[
				"tran",
				"transpose\tvoid transpose(InputArray src, OutputArray dst)"
			],
			[
				"be",
				"best"
			],
			[
				"inde",
				"indexi\tint indexi"
			],
			[
				"Poi",
				"Point2d\tPoint2d"
			],
			[
				"Point",
				"Point2d\tPoint2d"
			],
			[
				"sq",
				"sqrt\tdouble sqrt(double __x)"
			],
			[
				"CV",
				"CV_32FC1"
			],
			[
				"_p",
				"_p_mut"
			],
			[
				"GA",
				"GA_TSP"
			],
			[
				"cop",
				"copyTo\tvoid copyTo(OutputArray m) const"
			],
			[
				"co",
				"copyTo\tvoid copyTo(OutputArray m) const"
			],
			[
				"Ex",
				"exp\tvoid exp(InputArray src, OutputArray dst)"
			],
			[
				"Sca",
				"Scalar\tScalar"
			],
			[
				"par",
				"para_num"
			],
			[
				"b",
				"BPsolve\tvoid BPsolve(cv::Mat &_input, cv::Mat &_output)"
			],
			[
				"imp",
				"imp_out_b\tcv::Mat imp_out_b"
			],
			[
				"in_im",
				"in_imp_b\tcv::Mat in_imp_b"
			],
			[
				"in",
				"in_imp"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/box.cpp",
			"settings":
			{
				"buffer_size": 485,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/realsense.cpp",
			"settings":
			{
				"buffer_size": 2506,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 253,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "unity_test/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 364,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 168,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "includes/realsense.h",
			"settings":
			{
				"buffer_size": 651,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/detect.cpp",
			"settings":
			{
				"buffer_size": 10091,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/main.cpp",
			"settings":
			{
				"buffer_size": 1317,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "includes/detect.h",
			"settings":
			{
				"buffer_size": 762,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ssc/C++work/opencvtest/intrangdetect.cpp",
			"settings":
			{
				"buffer_size": 12121,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/ssc/C++work/doushicaji/libHardWare/usbCapture/src/realsense.cpp",
			"settings":
			{
				"buffer_size": 5421,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "ssc@ss                                 \n:~/C++                                 \nrk/box                                 \netect/                                 \nc$                                     \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n                                       \n",
			"settings":
			{
				"buffer_size": 2120,
				"line_ending": "Unix",
				"name": "Terminal (bash)",
				"read_only": true,
				"scratch": true
			}
		}
	],
	"build_system": "box_detect (Linux)",
	"build_system_choices":
	[
		[
			[
				[
					"box_detect (Linux)",
					""
				],
				[
					"box_detect (Linux)",
					"clean"
				],
				[
					"box_detect (Linux)",
					"rebuild_cache"
				],
				[
					"box_detect (Linux)",
					"hello"
				]
			],
			[
				"box_detect (Linux)",
				""
			]
		],
		[
			[
				[
					"box_detect (Linux)",
					""
				],
				[
					"box_detect (Linux)",
					"clean"
				],
				[
					"box_detect (Linux)",
					"rebuild_cache"
				],
				[
					"box_detect (Linux)",
					"hello"
				],
				[
					"box_detect (Linux)",
					"adjust"
				],
				[
					"box_detect (Linux)",
					"savecap"
				],
				[
					"box_detect (Linux)",
					"Shi_Tomasi"
				]
			],
			[
				"box_detect (Linux)",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 400.0,
		"last_filter": "gitp",
		"selected_items":
		[
			[
				"gitp",
				"Git: Pull"
			],
			[
				"git pull",
				"Git: Pull"
			],
			[
				"push",
				"Git: Push"
			],
			[
				"com",
				"Git: Commit"
			],
			[
				"add",
				"Git: Add All"
			],
			[
				"comm",
				"Git: Commit"
			],
			[
				"gitgutter",
				"GitGutter: Compare Against Branch"
			],
			[
				"pu",
				"Git: Pull"
			],
			[
				"bash",
				"Terminal View: Open Bash Terminal"
			],
			[
				"git ad",
				"Git: Add All"
			],
			[
				"pus",
				"Git: Push"
			],
			[
				"bas",
				"Terminal View: Open Bash Terminal"
			],
			[
				"catk",
				"Build With: Catkin"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"clan",
				"EasyClangComplete: Settings"
			],
			[
				"ter",
				"Terminal View: Open Bash Terminal"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"git co",
				"Git: Commit"
			],
			[
				"git a",
				"Git: Add All"
			],
			[
				"git pus",
				"Git: Push"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"git add",
				"Git: Add All"
			],
			[
				"git  push",
				"Git: Push"
			],
			[
				"git  com",
				"Git: Commit"
			],
			[
				"git  ad",
				"Git: Add Current File"
			],
			[
				"git  pus",
				"Git: Push"
			],
			[
				"git  add",
				"Git: Add All"
			],
			[
				"gita",
				"Git: Add All"
			],
			[
				"clang",
				"EasyClangComplete: Settings"
			]
		],
		"width": 601.0
	},
	"console":
	{
		"height": 402.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/ssc/C++work/box_detect",
		"/home/ssc/C++work/box_detect/includes",
		"/home/ssc/C++work/box_detect/src",
		"/home/ssc/C++work/box_detect/unity_test"
	],
	"file_history":
	[
		"/home/ssc/C++work/box_detect/CMakeLists.txt",
		"/home/ssc/C++work/box_detect/src/CMakeLists.txt",
		"/home/ssc/C++work/box_detect/README.md",
		"/home/ssc/C++work/box_detect/src/realsense.cpp",
		"/usr/include/librealsense2/rs.hpp",
		"/home/ssc/.config/sublime-text-3/Packages/User/C++.sublime-build",
		"/home/ssc/.config/sublime-text-3/Packages/User/C++.sublime-settings",
		"/usr/include/opencv2/core/types_c.h",
		"/usr/include/opencv2/core/core.hpp",
		"/home/ssc/C++work/box_detect/21XBP.jpg",
		"/home/ssc/C++work/box_detect/src/detect.cpp",
		"/home/ssc/C++work/box_detect/src/main.cpp",
		"/home/ssc/C++work/box_detect/unity_test/intrangdetect.cpp",
		"/home/ssc/C++work/box_detect/src/Shi_Tomasi.cpp",
		"/media/ssc/Ubuntu 16.0/box_detect/src/main.cpp",
		"/home/ssc/C++work/box_detect/unity_test/savepicfromcap.cpp",
		"/home/ssc/C++work/box_detect/.gitignore",
		"/home/ssc/C++work/box_detect/unity_test/CMakeLists.txt",
		"/home/ssc/C++work/2019huaweiSDK_C++/CMakeLists.txt",
		"/home/ssc/C++work/GeneticAlgorithm/src/GAlib/CMakeLists.txt",
		"/home/ssc/C++work/GeneticAlgorithm/README.md",
		"/home/ssc/C++work/box_detect/src/savepicfromcap.cpp",
		"/home/ssc/C++work/opencvtest/async.cpp",
		"/home/ssc/C++work/box_detect/src/adjustfindhsv.cpp",
		"/home/ssc/C++work/RemortCamerConnect_ARM-PC/TCP/src/mytcp.cpp",
		"/home/ssc/C++work/RemortCamerConnect_ARM-PC/camer_pi_TCP.cpp",
		"/home/ssc/C++work/Octopus_learing/CMakeLists.txt",
		"/home/ssc/C++work/Octopus_learing/src/_libevent.cpp",
		"/home/ssc/C++work/Octopus_learing/includes/common.h",
		"/home/ssc/C++work/Octopus_learing/unit_test/server.cpp",
		"/home/ssc/C++work/RemortCamerConnect_ARM-PC/camer_pc_TCP.cpp",
		"/home/ssc/C++work/doushicaji/CMakeLists.txt",
		"/home/ssc/C++work/Octopus_learing/libevent/sample/hello-world.c",
		"/home/ssc/C++work/libmsc/TX2关于科大讯飞语音动态库/相关网页（需注册科大讯飞论坛账号）.txt",
		"/home/ssc/C++work/Octopus_learing/libevent/bufferevent.c",
		"/home/ssc/C++work/Octopus_learing/unit_test/cJSONtest/cJSON_test.cpp",
		"/home/ssc/C++work/Octopus_learing/unit_test/cJSONtest/CMakeLists.txt",
		"/home/ssc/C++work/Octopus_learing/unit_test/CMakeLists.txt",
		"/home/ssc/C++work/Octopus_learing/unit_test/cJSON_test/CMakeLists.txt",
		"/home/ssc/C++work/Octopus_learing/includes/mycJSON.h",
		"/home/ssc/C++work/Octopus_learing/unit_test/cJSON_test/cJSON_test.cpp",
		"/home/ssc/C++work/Octopus_learing/libevent/CMakeLists.txt",
		"/home/ssc/C++work/linuxserver/libevent.cpp",
		"/home/ssc/C++work/Octopus_learing/src/CMakeLists.txt",
		"/home/ssc/C++work/ncnn/src/layer.h",
		"/home/ssc/C++work/ncnn/examples/CMakeLists.txt",
		"/home/ssc/catkin_ws/src/press_sensor/package.xml",
		"/home/ssc/catkin_ws/src/motor_control/src/motor_contorl_node.cpp",
		"/home/ssc/catkin_ws/src/press_sensor/CMakeLists.txt",
		"/home/ssc/catkin_ws/src/press_sensor/src/press_sensor_node.cpp",
		"/home/ssc/catkin_ws/src/press_sensor/press_sensor_node.cpp",
		"/home/ssc/Arduino/libraries/MPU6050/MPU6050.cpp",
		"/home/ssc/Arduino/libraries/MPU6050/MPU6050.h",
		"/home/ssc/Arduino/libraries/MPU6050/MPU6050_6Axis_MotionApps20.h",
		"/home/ssc/catkin_ws/src/mpu6050_serial_to_imu/src/mpu6050_serial_to_imu_node.cpp",
		"/home/ssc/catkin_ws/src/mpu6050_serial_to_imu/launch/demo.launch",
		"/home/ssc/C++work/GeneticAlgorithm/src/GAlib/GA_TSP.cpp",
		"/home/ssc/C++work/bulid_tree.cpp",
		"/home/ssc/C++work/mlpacktest.cpp",
		"/media/ssc/C2B31627EFFD64AE/2018/mark.py",
		"/home/ssc/C++work/GeneticAlgorithm/src/GAlib/QGA.cpp",
		"/home/ssc/C++work/GeneticAlgorithm/includes/figure.h",
		"/home/ssc/.cache/.fr-1M0XA9/chapter10/main.m",
		"/home/ssc/C++work/GeneticAlgorithm/src/CMakeLists.txt",
		"/home/ssc/C++work/GeneticAlgorithm/includes/demo.h",
		"/home/ssc/C++work/GeneticAlgorithm/src/GAlib/E_GA.cpp",
		"/home/ssc/C++work/GeneticAlgorithm/build/src/point.txt",
		"/home/ssc/C++work/darknet/python/darknet.py",
		"/media/ssc/Ubuntu 16.0/predata.m",
		"/home/ssc/C++work/GeneticAlgorithm/build/src/adjust_data.txt",
		"/home/ssc/matlab_work/2017E/predata.m",
		"/home/ssc/C++work/GeneticAlgorithm/src/cvplotlib/figure.cc",
		"/home/ssc/GeneticAlgorithm/build/src/adjust_data.txt",
		"/usr/include/opencv2/core/mat.hpp",
		"/home/ssc/C++work/GeneticAlgorithm/src/GAlib/GA.cpp",
		"/home/ssc/C++work/GeneticAlgorithm/src/GAlib/GA_BP.cpp",
		"/home/ssc/C++work/GeneticAlgorithm/includes/GA.h",
		"/home/ssc/C++work/GeneticAlgorithm/CMakeLists.txt",
		"/home/ssc/C++work/GeneticAlgorithm/src/demo.cpp",
		"/home/ssc/.config/sublime-text-3/Packages/User/SublimeGDB.sublime-settings",
		"/home/ssc/.config/sublime-text-3/Packages/SublimeGDB/SublimeGDB.sublime-settings",
		"/usr/include/c++/5/bits/stl_algo.h",
		"/home/ssc/C++work/GeneticAlgorithm/includes/internal.h",
		"/home/ssc/C++work/GeneticAlgorithm/src/GAlib/GA.h",
		"/home/ssc/C++work/GeneticAlgorithm/includes/window.h",
		"/home/ssc/C++work/GeneticAlgorithm/GeneticAlgorithmByC++.sublime-project",
		"/home/ssc/C++work/GeneticAlgorithmByC++/src/cvplotlib/figure.cc",
		"/home/ssc/C++work/GeneticAlgorithmByC++/includes/figure.h",
		"/home/ssc/C++work/GeneticAlgorithmByC++/includes/window.h",
		"/home/ssc/C++work/GeneticAlgorithmByC++/CMakeLists.txt",
		"/home/ssc/C++work/GeneticAlgorithmByC++/src/cvplotlib/CMakeLists.txt",
		"/home/ssc/C++work/GeneticAlgorithmByC++/src/CMakeLists.txt",
		"/media/ssc/C2B31627EFFD64AE/PY_work/tensorflow_test.py",
		"/home/ssc/文档/test.tex",
		"/home/ssc/.config/sublime-text-3/Packages/User/LaTeXTools.sublime-settings",
		"/home/ssc/C++work/RemortCamerConnect_ARM-PC/test.tex",
		"/home/ssc/.config/sublime-text-3/Packages/SideBarEnhancements/Side Bar.sublime-settings",
		"/home/ssc/.config/sublime-text-3/Packages/Git/Git.sublime-settings",
		"/home/ssc/.config/sublime-text-3/Packages/User/Git.sublime-settings",
		"/home/ssc/.config/sublime-text-3/Packages/User/Side Bar.sublime-settings",
		"/home/ssc/C++work/RemortCamerConnect_ARM-PC/TCP/CMakeLists.txt",
		"/home/ssc/C++work/RemortCamerConnect_ARM-PC/README.md",
		"/home/ssc/C++work/RemortCamerConnect_ARM-PC/TCP/src/CMakeLists.txt"
	],
	"find":
	{
		"height": 43.0
	},
	"find_in_files":
	{
		"height": 501.851851852,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"align_to",
			"alig",
			"static",
			"imgMutex",
			"EXIT_SUCCESS",
			"isColorImgUpdate",
			"start",
			"Mat ",
			"Mat",
			"AdjustContrastAndLight",
			"bak_img",
			"60000",
			"250",
			"isParallel",
			"Box",
			"getVector",
			"img",
			"Put",
			"img",
			"Box",
			"0",
			";\n",
			"GetColor",
			"source_window",
			"area",
			"src",
			"20",
			"10",
			"WhichDir",
			";\n",
			"maxCosinelimte",
			"Light",
			"Contrast"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/box.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 485,
						"regions":
						{
						},
						"selection":
						[
							[
								149,
								149
							],
							[
								391,
								391
							]
						],
						"settings":
						{
							"function_name_status_row": 14,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/realsense.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2506,
						"regions":
						{
						},
						"selection":
						[
							[
								86,
								86
							]
						],
						"settings":
						{
							"function_name_status_row": 4,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 253,
						"regions":
						{
						},
						"selection":
						[
							[
								132,
								132
							]
						],
						"settings":
						{
							"function_name_status_row": 5,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "unity_test/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 364,
						"regions":
						{
						},
						"selection":
						[
							[
								364,
								364
							]
						],
						"settings":
						{
							"function_name_status_row": 13,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 168,
						"regions":
						{
						},
						"selection":
						[
							[
								98,
								98
							]
						],
						"settings":
						{
							"function_name_status_row": 5,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "includes/realsense.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 651,
						"regions":
						{
						},
						"selection":
						[
							[
								120,
								120
							]
						],
						"settings":
						{
							"function_name_status_row": 6,
							"git_gutter_is_enabled": true,
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/detect.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10091,
						"regions":
						{
						},
						"selection":
						[
							[
								105,
								105
							]
						],
						"settings":
						{
							"function_name_status_row": 4,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1317,
						"regions":
						{
						},
						"selection":
						[
							[
								260,
								260
							]
						],
						"settings":
						{
							"function_name_status_row": 13,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "includes/detect.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 762,
						"regions":
						{
						},
						"selection":
						[
							[
								158,
								158
							]
						],
						"settings":
						{
							"auto_name": "",
							"function_name_status_row": 12,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 9,
					"file": "/home/ssc/C++work/opencvtest/intrangdetect.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12121,
						"regions":
						{
						},
						"selection":
						[
							[
								5136,
								5136
							]
						],
						"settings":
						{
							"function_name_status_row": 143,
							"git_gutter_is_enabled": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1620.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/home/ssc/C++work/doushicaji/libHardWare/usbCapture/src/realsense.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5421,
						"regions":
						{
						},
						"selection":
						[
							[
								171,
								171
							]
						],
						"settings":
						{
							"function_name_status_row": 7,
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 11,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2120,
						"regions":
						{
						},
						"selection":
						[
							[
								163,
								163
							]
						],
						"settings":
						{
							"auto_complete": false,
							"auto_complete_commit_on_tab": false,
							"caret_style": "blink",
							"color_scheme": "Packages/TerminalView/TerminalView.hidden-tmTheme",
							"default_dir": "/home/ssc/C++work/box_detect/src",
							"draw_centered": false,
							"draw_indent_guides": false,
							"draw_white_space": "none",
							"function_name_status_row": 4,
							"git_gutter_is_enabled": false,
							"gutter": false,
							"highlight_line": false,
							"scroll_past_end": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"terminal_view": true,
							"terminal_view_activate_args":
							{
								"cmd": "/bin/bash -l",
								"cwd": "/home/ssc/C++work/box_detect/src",
								"keep_open": false,
								"syntax": null,
								"title": "Terminal (bash)"
							},
							"terminal_view_last_cursor_pos":
							[
								4,
								3
							],
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.7037037037
	},
	"input":
	{
		"height": 224.074074074
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.479030409094,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 191.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 116.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 116.0
	},
	"pinned_build_system": "box_detect (Linux)",
	"project": "box_detect.sublime-project",
	"replace":
	{
		"height": 82.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"motor_control/src/motor.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 212.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
