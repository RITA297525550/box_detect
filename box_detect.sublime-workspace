{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"dra",
				"drawContours\tvoid drawContours(InputOutputArray image, InputArrayOfArrays contours, int contourIdx, const Scalar &color)"
			],
			[
				"con",
				"contourArea\tdouble contourArea(InputArray contour)"
			],
			[
				"cou",
				"contours"
			],
			[
				"thre",
				"threshold\tdouble threshold(InputArray src, OutputArray dst, double thresh, double maxval, int type)"
			],
			[
				"im",
				"imread\tcv::Mat imread(const cv::String &filename)"
			],
			[
				"Quaternion",
				"Quaterniond\tQuaterniond"
			],
			[
				"Uni",
				"UnitX\tconst BasisReturnType UnitX()"
			],
			[
				"An",
				"AngleAxisd\tAngleAxisd"
			],
			[
				"Matr",
				"Matrix3d\tMatrix3d"
			],
			[
				"Ve",
				"Vector3d\tVector3d"
			],
			[
				"V",
				"Vector3d\tVector3d"
			],
			[
				"clock_",
				"clock_t\tclock_t"
			],
			[
				"recv",
				"recv_buff\tchar [80] recv_buff"
			],
			[
				"input",
				"input_size"
			],
			[
				"conn",
				"conn_writecb"
			],
			[
				"inpu",
				"input_size"
			],
			[
				"event_free",
				"event_base_free\tvoid event_base_free(struct event_base *)"
			],
			[
				"inp",
				"input_size\tsize_t input_size"
			],
			[
				"enc",
				"encode\tbool encode()"
			],
			[
				"s",
				"size\tsize_type size() const"
			],
			[
				"it",
				"iter"
			],
			[
				"en",
				"encode\tbool encode()"
			],
			[
				"cJSON_AddNu",
				"cJSON_AddNumberToObject\tcJSON * cJSON_AddNumberToObject(cJSON *const object, const char *const name, const double number)"
			],
			[
				"my",
				"mycJSON\tmycJSON::"
			],
			[
				"cJSON_AddItem",
				"cJSON_AddItemToObject\tvoid cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)"
			],
			[
				"cJSON_Cre",
				"cJSON_CreateArray"
			],
			[
				"cJSON_C",
				"cJSON_CreateArray"
			],
			[
				"cJ",
				"cJSON_Object"
			],
			[
				"cJSON_A",
				"cJSON_AddNumberToObject\tcJSON * cJSON_AddNumberToObject(cJSON *const object, const char *const name, const double number)"
			],
			[
				"cJSON_Add",
				"cJSON_AddItemToArray\tvoid cJSON_AddItemToArray(cJSON *array, cJSON *item)"
			],
			[
				"ite",
				"item_size"
			],
			[
				"dec",
				"decode"
			],
			[
				"os",
				"ostream\tostream"
			],
			[
				"ope",
				"operator[]\tmycJSON & operator[](std::string name)"
			],
			[
				"inclu",
				"include_directories"
			],
			[
				"cJSON_P",
				"cJSON_Parse\tcJSON * cJSON_Parse(const char *value)"
			],
			[
				"cJSON_AddIte",
				"cJSON_AddItemToObject\tvoid cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)"
			],
			[
				"inc",
				"include_directories"
			],
			[
				"event_base_loo",
				"event_base_loopexit\tint event_base_loopexit(struct event_base *, const struct timeval *)"
			],
			[
				"even",
				"event_base_dispatch\tint event_base_dispatch(struct event_base *)"
			],
			[
				"LEV",
				"LEV_OPT_REUSEABLE\tLEV_OPT_REUSEABLE"
			],
			[
				"si",
				"sin_port\tin_port_t sin_port"
			],
			[
				"sin",
				"sin_family\tsa_family_t sin_family"
			],
			[
				"buffer",
				"bufferevent\tbufferevent"
			],
			[
				"size",
				"size_t\tsize_t"
			],
			[
				"evbu",
				"evbuffer_lock\tvoid evbuffer_lock(struct evbuffer *buf)"
			],
			[
				"event_base_lo",
				"event_base_loopbreak\tint event_base_loopbreak(struct event_base *)"
			],
			[
				"event_base",
				"event_base_loop\tint event_base_loop(struct event_base *, int)"
			],
			[
				"buff",
				"bufferevent"
			],
			[
				"stru",
				"struct\tstruct"
			],
			[
				"struct",
				"struct\tstruct"
			],
			[
				"evutil_s",
				"evutil_socket_t\tevutil_socket_t"
			],
			[
				"struc",
				"struct\tstruct"
			],
			[
				"pri",
				"private\tprivate"
			],
			[
				"event",
				"event2/event.h\t/usr/local/include"
			],
			[
				"lis",
				"listener_cb"
			],
			[
				"event_ba",
				"event_base_new\tstruct event_base * event_base_new()"
			],
			[
				"str",
				"struct\tstruct"
			],
			[
				"soc",
				"asm/socket.h\t/usr/include/x86_64-linux-gnu"
			],
			[
				"ros",
				"rospubstring\tros Publisher string"
			],
			[
				"ma",
				"main\tmain()"
			],
			[
				"re",
				"result"
			],
			[
				"_",
				"_chrom_num"
			],
			[
				"row",
				"row\tcv::Mat row(int y) const"
			],
			[
				"da",
				"dataPoint"
			],
			[
				"data",
				"dataPoint\tstd::vector<std::pair<float, float> > dataPoint"
			],
			[
				"Gr",
				"Green\tconst cvplot::Color Green"
			],
			[
				"add",
				"addValue\tcvplot::Series & addValue(const std::vector<float> &values)"
			],
			[
				"dis",
				"dist"
			],
			[
				"gen",
				"gene1"
			],
			[
				"a",
				"assign\tvoid assign(size_type __n, const value_type &__val)"
			],
			[
				"P",
				"Popula"
			],
			[
				"Po",
				"Popula"
			],
			[
				"CV8",
				"CV_8UC1\tCV_8UC1"
			],
			[
				"tran",
				"transpose\tvoid transpose(InputArray src, OutputArray dst)"
			],
			[
				"be",
				"best"
			],
			[
				"inde",
				"indexi\tint indexi"
			],
			[
				"Poi",
				"Point2d\tPoint2d"
			],
			[
				"Point",
				"Point2d\tPoint2d"
			],
			[
				"sq",
				"sqrt\tdouble sqrt(double __x)"
			],
			[
				"Poin",
				"Point2d\tPoint2d"
			],
			[
				"CV",
				"CV_32FC1"
			],
			[
				"_p",
				"_p_mut"
			],
			[
				"GA",
				"GA_TSP"
			],
			[
				"cop",
				"copyTo\tvoid copyTo(OutputArray m) const"
			],
			[
				"co",
				"copyTo\tvoid copyTo(OutputArray m) const"
			],
			[
				"Ex",
				"exp\tvoid exp(InputArray src, OutputArray dst)"
			],
			[
				"Sca",
				"Scalar\tScalar"
			],
			[
				"par",
				"para_num"
			],
			[
				"b",
				"BPsolve\tvoid BPsolve(cv::Mat &_input, cv::Mat &_output)"
			],
			[
				"imp",
				"imp_out_b\tcv::Mat imp_out_b"
			],
			[
				"in_im",
				"in_imp_b\tcv::Mat in_imp_b"
			],
			[
				"in",
				"in_imp"
			],
			[
				"in_",
				"in_imp_b\tcv::Mat in_imp_b"
			],
			[
				"col",
				"cols\tint cols"
			],
			[
				"ro",
				"rowRange\tcv::Mat rowRange(int startrow, int endrow) const"
			],
			[
				"sl",
				"solve\tvoid solve(float (*_fun)(...))"
			],
			[
				"pa",
				"para_num"
			],
			[
				"dem",
				"demo4\tvoid demo4(std::function<float (...)> fun)"
			],
			[
				"va",
				"va_end\tva_end(ap)"
			],
			[
				"va_",
				"va_start\tva_start(ap, param)"
			],
			[
				"obj",
				"objV2\tstd::vector<float> & objV2"
			],
			[
				"ob",
				"objV2"
			],
			[
				"cv",
				"CV_32FC1"
			],
			[
				"tem",
				"tem1"
			],
			[
				"bes",
				"best2"
			],
			[
				"de",
				"demo1_2.png\tw:800 h:400"
			],
			[
				"reco",
				"recode_rank_index\tstd::vector<std::pair<int, float> > recode_rank_index"
			],
			[
				"max",
				"max_index\tint max_index"
			],
			[
				"ost",
				"osty"
			],
			[
				"ch",
				"chrom_num"
			],
			[
				"best",
				"best\tstd::pair<float, float> best"
			],
			[
				"se",
				"setValue\tcvplot::Series & setValue(const std::vector<Point2> &values)"
			],
			[
				"setVa",
				"setValue\tcvplot::Series & setValue(const std::vector<Point2> &values)"
			],
			[
				"serc",
				"search_max"
			],
			[
				"ser",
				"search_min"
			],
			[
				"p_",
				"p_mut"
			],
			[
				"gr",
				"Green\tconst cvplot::Color Green"
			],
			[
				"c",
				"color\tcvplot::Color color() const"
			],
			[
				"resi",
				"resizeWindow\tvoid resizeWindow(const std::string &view, int width, int height)"
			],
			[
				"ab",
				"abs\tfloat abs(float __x)"
			],
			[
				"Size",
				"Size\tSize"
			],
			[
				"setW",
				"setWindowTitle\tvoid setWindowTitle(const std::string &view, const std::string &title)"
			],
			[
				"pop",
				"Population\tcv::Mat Population"
			],
			[
				"for",
				"for_each\t_Function for_each(_InputIterator __first, _InputIterator __last, _Function __f)"
			],
			[
				"randu",
				"randu\tvoid randu(InputOutputArray dst, InputArray low, InputArray high)"
			],
			[
				"m",
				"main\tmain()"
			],
			[
				"com",
				"command_buffer\tuchar * command_buffer"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/main.cpp",
			"settings":
			{
				"buffer_size": 7639,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "ssc@ssc2:~/C++work/box_detect/src$                                                              \nssc@ssc2:~/C++work/box_detect/src$ cd ../build/src/                                             \nssc@ssc2:~/C++work/box_detect/build/src$ ./he                                                   \nbash: ./he: 没 有 那 个 文 件 或 目 录                                                                   \nssc@ssc2:~/C++work/box_detect/build/src$ ls                                                     \nadjust  CMakeFiles  cmake_install.cmake  hello  HSV_inRange.jpg  Makefile  savecap              \nssc@ssc2:~/C++work/box_detect/build/src$ ls                                                     \nadjust  CMakeFiles  cmake_install.cmake  hello  HSV_inRange.jpg  Makefile  savecap              \nssc@ssc2:~/C++work/box_detect/build/src$ ll                                                     \n总 用 量  532                                                                                      \ndrwxr-xr-x 3 ssc ssc   4096 5月   27 12:22 ./                                                    \ndrwxr-xr-x 5 ssc ssc   4096 5月   27 12:22 ../                                                   \n-rw-r--r-- 1 ssc ssc  99384 5月   21 16:47 adjust                                                \ndrwxr-xr-x 5 ssc ssc   4096 5月   27 12:22 CMakeFiles/                                           \n-rw-r--r-- 1 ssc ssc   1130 5月   17 20:04 cmake_install.cmake                                   \n-rw-r--r-- 1 ssc ssc 302800 5月   27 11:34 hello                                                 \n-rw-r--r-- 1 ssc ssc  18001 5月   27 09:36 HSV_inRange.jpg                                       \n-rw-r--r-- 1 ssc ssc   8488 5月   21 16:16 Makefile                                              \n-rw-r--r-- 1 ssc ssc  89240 5月   21 16:48 savecap                                               \nssc@ssc2:~/C++work/box_detect/build/src$                                                        \nssc@ssc2:~/C++work/box_detect/build/src$ cd ..                                                  \nssc@ssc2:~/C++work/box_detect/build$ cd src/                                                    \nssc@ssc2:~/C++work/box_detect/build/src$ ls                                                     \nadjust  CMakeFiles  cmake_install.cmake  hello  Makefile  savecap                               \nssc@ssc2:~/C++work/box_detect/build/src$ ./hello                                                \nssc@ssc2:~/C++work/box_detect/build/src$ ./hello                                                \nssc@ssc2:~/C++work/box_detect/build/src$ ./hello                                                \nssc@ssc2:~/C++work/box_detect/build/src$ ./hello                                                \nssc@ssc2:~/C++work/box_detect/build/src$ ./hello                                                \nssc@ssc2:~/C++work/box_detect/build/src$ ./hello                                                \nssc@ssc2:~/C++work/box_detect/build/src$ ./hello                                                \nssc@ssc2:~/C++work/box_detect/build/src$ ./hello                                                \nssc@ssc2:~/C++work/box_detect/build/src$ ./hello                                                \nssc@ssc2:~/C++work/box_detect/build/src$ ./hello                                                \nssc@ssc2:~/C++work/box_detect/build/src$                                                        \n                                                                                                \n                                                                                                \n                                                                                                \n                                                                                                \n                                                                                                \n",
			"settings":
			{
				"buffer_size": 3880,
				"line_ending": "Unix",
				"name": "Terminal (bash)",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "/home/ssc/C++work/opencvtest/intrangdetect.cpp",
			"settings":
			{
				"buffer_size": 12121,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "box_detect (Linux)",
	"build_system_choices":
	[
		[
			[
				[
					"box_detect (Linux)",
					""
				],
				[
					"box_detect (Linux)",
					"clean"
				],
				[
					"box_detect (Linux)",
					"rebuild_cache"
				],
				[
					"box_detect (Linux)",
					"hello"
				]
			],
			[
				"box_detect (Linux)",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 409.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"bash",
				"Terminal View: Open Bash Terminal"
			],
			[
				"bas",
				"Terminal View: Open Bash Terminal"
			],
			[
				"catk",
				"Build With: Catkin"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"clan",
				"EasyClangComplete: Settings"
			],
			[
				"ter",
				"Terminal View: Open Bash Terminal"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"git co",
				"Git: Commit"
			],
			[
				"git a",
				"Git: Add All"
			],
			[
				"git pus",
				"Git: Push"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"git ad",
				"Git: Add All"
			],
			[
				"git add",
				"Git: Add All"
			],
			[
				"git  push",
				"Git: Push"
			],
			[
				"git  com",
				"Git: Commit"
			],
			[
				"git  ad",
				"Git: Add Current File"
			],
			[
				"git  pus",
				"Git: Push"
			],
			[
				"git  add",
				"Git: Add All"
			],
			[
				"gita",
				"Git: Add All"
			],
			[
				"clang",
				"EasyClangComplete: Settings"
			]
		],
		"width": 602.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/ssc/C++work/box_detect"
	],
	"file_history":
	[
		"/home/ssc/C++work/box_detect/CMakeLists.txt",
		"/home/ssc/C++work/box_detect/src/adjustfindhsv.cpp",
		"/home/ssc/C++work/box_detect/src/CMakeLists.txt",
		"/home/ssc/C++work/RemortCamerConnect_ARM-PC/TCP/src/mytcp.cpp",
		"/home/ssc/C++work/RemortCamerConnect_ARM-PC/camer_pi_TCP.cpp",
		"/home/ssc/C++work/Octopus_learing/CMakeLists.txt",
		"/home/ssc/C++work/Octopus_learing/src/_libevent.cpp",
		"/home/ssc/C++work/Octopus_learing/includes/common.h",
		"/home/ssc/C++work/Octopus_learing/unit_test/server.cpp",
		"/home/ssc/C++work/RemortCamerConnect_ARM-PC/camer_pc_TCP.cpp",
		"/home/ssc/C++work/doushicaji/CMakeLists.txt",
		"/home/ssc/C++work/Octopus_learing/libevent/sample/hello-world.c",
		"/home/ssc/C++work/libmsc/TX2关于科大讯飞语音动态库/相关网页（需注册科大讯飞论坛账号）.txt",
		"/home/ssc/C++work/Octopus_learing/libevent/bufferevent.c",
		"/home/ssc/C++work/Octopus_learing/unit_test/cJSONtest/cJSON_test.cpp",
		"/home/ssc/C++work/Octopus_learing/unit_test/cJSONtest/CMakeLists.txt",
		"/home/ssc/C++work/Octopus_learing/unit_test/CMakeLists.txt",
		"/home/ssc/C++work/Octopus_learing/unit_test/cJSON_test/CMakeLists.txt",
		"/home/ssc/C++work/Octopus_learing/includes/mycJSON.h",
		"/home/ssc/C++work/Octopus_learing/unit_test/cJSON_test/cJSON_test.cpp",
		"/home/ssc/C++work/Octopus_learing/libevent/CMakeLists.txt",
		"/home/ssc/C++work/linuxserver/libevent.cpp",
		"/home/ssc/C++work/Octopus_learing/src/CMakeLists.txt",
		"/home/ssc/C++work/ncnn/src/layer.h",
		"/home/ssc/C++work/ncnn/examples/CMakeLists.txt",
		"/home/ssc/catkin_ws/src/press_sensor/package.xml",
		"/home/ssc/catkin_ws/src/motor_control/src/motor_contorl_node.cpp",
		"/home/ssc/catkin_ws/src/press_sensor/CMakeLists.txt",
		"/home/ssc/catkin_ws/src/press_sensor/src/press_sensor_node.cpp",
		"/home/ssc/catkin_ws/src/press_sensor/press_sensor_node.cpp",
		"/home/ssc/Arduino/libraries/MPU6050/MPU6050.cpp",
		"/home/ssc/Arduino/libraries/MPU6050/MPU6050.h",
		"/home/ssc/Arduino/libraries/MPU6050/MPU6050_6Axis_MotionApps20.h",
		"/home/ssc/catkin_ws/src/mpu6050_serial_to_imu/src/mpu6050_serial_to_imu_node.cpp",
		"/home/ssc/catkin_ws/src/mpu6050_serial_to_imu/launch/demo.launch",
		"/home/ssc/C++work/GeneticAlgorithm/src/GAlib/GA_TSP.cpp",
		"/home/ssc/C++work/bulid_tree.cpp",
		"/home/ssc/C++work/mlpacktest.cpp",
		"/media/ssc/C2B31627EFFD64AE/2018/mark.py",
		"/home/ssc/C++work/GeneticAlgorithm/src/GAlib/QGA.cpp",
		"/home/ssc/C++work/GeneticAlgorithm/includes/figure.h",
		"/home/ssc/.cache/.fr-1M0XA9/chapter10/main.m",
		"/home/ssc/C++work/GeneticAlgorithm/src/CMakeLists.txt",
		"/home/ssc/C++work/GeneticAlgorithm/includes/demo.h",
		"/home/ssc/.config/sublime-text-3/Packages/User/C++.sublime-build",
		"/home/ssc/C++work/GeneticAlgorithm/src/GAlib/E_GA.cpp",
		"/home/ssc/C++work/GeneticAlgorithm/build/src/point.txt",
		"/home/ssc/C++work/darknet/python/darknet.py",
		"/media/ssc/Ubuntu 16.0/predata.m",
		"/home/ssc/C++work/GeneticAlgorithm/build/src/adjust_data.txt",
		"/home/ssc/matlab_work/2017E/predata.m",
		"/home/ssc/C++work/GeneticAlgorithm/src/cvplotlib/figure.cc",
		"/home/ssc/GeneticAlgorithm/build/src/adjust_data.txt",
		"/usr/include/opencv2/core/mat.hpp",
		"/home/ssc/C++work/GeneticAlgorithm/src/GAlib/GA.cpp",
		"/home/ssc/C++work/GeneticAlgorithm/src/GAlib/GA_BP.cpp",
		"/home/ssc/C++work/GeneticAlgorithm/includes/GA.h",
		"/home/ssc/C++work/GeneticAlgorithm/CMakeLists.txt",
		"/home/ssc/C++work/GeneticAlgorithm/src/demo.cpp",
		"/home/ssc/C++work/GeneticAlgorithm/README.md",
		"/home/ssc/.config/sublime-text-3/Packages/User/SublimeGDB.sublime-settings",
		"/home/ssc/.config/sublime-text-3/Packages/SublimeGDB/SublimeGDB.sublime-settings",
		"/usr/include/c++/5/bits/stl_algo.h",
		"/home/ssc/C++work/GeneticAlgorithm/includes/internal.h",
		"/home/ssc/C++work/GeneticAlgorithm/src/GAlib/GA.h",
		"/home/ssc/C++work/GeneticAlgorithm/src/GAlib/CMakeLists.txt",
		"/home/ssc/C++work/GeneticAlgorithm/includes/window.h",
		"/home/ssc/C++work/GeneticAlgorithm/GeneticAlgorithmByC++.sublime-project",
		"/home/ssc/C++work/GeneticAlgorithmByC++/src/cvplotlib/figure.cc",
		"/home/ssc/C++work/GeneticAlgorithmByC++/includes/figure.h",
		"/home/ssc/C++work/GeneticAlgorithmByC++/includes/window.h",
		"/home/ssc/C++work/GeneticAlgorithmByC++/CMakeLists.txt",
		"/home/ssc/C++work/GeneticAlgorithmByC++/src/cvplotlib/CMakeLists.txt",
		"/home/ssc/C++work/GeneticAlgorithmByC++/src/CMakeLists.txt",
		"/media/ssc/C2B31627EFFD64AE/PY_work/tensorflow_test.py",
		"/home/ssc/文档/test.tex",
		"/home/ssc/.config/sublime-text-3/Packages/User/LaTeXTools.sublime-settings",
		"/home/ssc/C++work/RemortCamerConnect_ARM-PC/test.tex",
		"/home/ssc/.config/sublime-text-3/Packages/SideBarEnhancements/Side Bar.sublime-settings",
		"/home/ssc/.config/sublime-text-3/Packages/Git/Git.sublime-settings",
		"/home/ssc/.config/sublime-text-3/Packages/User/Git.sublime-settings",
		"/home/ssc/.config/sublime-text-3/Packages/User/Side Bar.sublime-settings",
		"/home/ssc/C++work/RemortCamerConnect_ARM-PC/TCP/CMakeLists.txt",
		"/home/ssc/C++work/RemortCamerConnect_ARM-PC/README.md",
		"/home/ssc/C++work/RemortCamerConnect_ARM-PC/TCP/src/CMakeLists.txt"
	],
	"find":
	{
		"height": 43.0
	},
	"find_in_files":
	{
		"height": 501.851851852,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7639,
						"regions":
						{
						},
						"selection":
						[
							[
								3272,
								3272
							]
						],
						"settings":
						{
							"function_name_status_row": -1,
							"git_gutter_is_enabled": false,
							"spell_check": true,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1512.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3880,
						"regions":
						{
							"10,42":
							{
								"flags": 272,
								"regions":
								[
									[
										1012,
										1013
									]
								],
								"scope": "terminalview.black_blue"
							},
							"11,42":
							{
								"flags": 272,
								"regions":
								[
									[
										1109,
										1111
									]
								],
								"scope": "terminalview.black_blue"
							},
							"13,42":
							{
								"flags": 272,
								"regions":
								[
									[
										1303,
										1313
									]
								],
								"scope": "terminalview.black_blue"
							},
							"16,42":
							{
								"flags": 272,
								"regions":
								[
									[
										1594,
										1609
									]
								],
								"scope": "terminalview.black_magenta"
							},
							"23,0":
							{
								"flags": 272,
								"regions":
								[
									[
										2231,
										2237
									]
								],
								"scope": "terminalview.black_green"
							},
							"23,41":
							{
								"flags": 272,
								"regions":
								[
									[
										2272,
										2277
									]
								],
								"scope": "terminalview.black_green"
							},
							"23,58":
							{
								"flags": 272,
								"regions":
								[
									[
										2289,
										2296
									]
								],
								"scope": "terminalview.black_green"
							},
							"23,8":
							{
								"flags": 272,
								"regions":
								[
									[
										2239,
										2249
									]
								],
								"scope": "terminalview.black_blue"
							},
							"5,48":
							{
								"flags": 272,
								"regions":
								[
									[
										533,
										548
									]
								],
								"scope": "terminalview.black_magenta"
							},
							"5,8":
							{
								"flags": 272,
								"regions":
								[
									[
										493,
										503
									]
								],
								"scope": "terminalview.black_blue"
							},
							"7,48":
							{
								"flags": 272,
								"regions":
								[
									[
										727,
										742
									]
								],
								"scope": "terminalview.black_magenta"
							},
							"7,8":
							{
								"flags": 272,
								"regions":
								[
									[
										687,
										697
									]
								],
								"scope": "terminalview.black_blue"
							}
						},
						"selection":
						[
							[
								3339,
								3339
							]
						],
						"settings":
						{
							"auto_complete": false,
							"auto_complete_commit_on_tab": false,
							"caret_style": "blink",
							"color_scheme": "Packages/TerminalView/TerminalView.hidden-tmTheme",
							"default_dir": "/home/ssc/C++work/box_detect/src",
							"draw_centered": false,
							"draw_indent_guides": false,
							"draw_white_space": "none",
							"function_name_status_row": 34,
							"git_gutter_is_enabled": false,
							"gutter": false,
							"highlight_line": false,
							"scroll_past_end": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"terminal_view": true,
							"terminal_view_activate_args":
							{
								"cmd": "/bin/bash -l",
								"cwd": "/home/ssc/C++work/box_detect/src",
								"keep_open": false,
								"syntax": null,
								"title": "Terminal (bash)"
							},
							"terminal_view_last_cursor_pos":
							[
								34,
								41
							],
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 2,
					"file": "/home/ssc/C++work/opencvtest/intrangdetect.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12121,
						"regions":
						{
						},
						"selection":
						[
							[
								3501,
								3501
							]
						],
						"settings":
						{
							"function_name_status_row": 102,
							"git_gutter_is_enabled": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1719.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.7037037037
	},
	"input":
	{
		"height": 224.074074074
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.583714567306,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 245.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "box_detect (Linux)",
	"project": "box_detect.sublime-project",
	"replace":
	{
		"height": 53.7037037037
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"motor_control/src/motor.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 137.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
